<?php defined('SYSPATH') or die('No direct script access.');

class Controller_Api extends Controller_Template
{
    public $auth_required = FALSE;
    public $auto_render = FALSE;

    private function do_login()
    {
        $json = json_decode($this->request->body(), true);
        if (!$json)
        {
            $this->response->body('Invalid data provided.');
            return false;
        }

        if ( ! Auth::instance()->login($json["username"], $json["password"]))
        {
            $this->response->body('Bad username/password');
            return false;
        }

        return $json;
    }

    public function action_list_users()
    {
        if (!$this->do_login()) return;

        $owner = Auth::instance()->get_user();

        $output = array();

        $output["default"] = "Description";

        foreach ($owner->participants->find_all() as $participant)
        {
            $output[$participant->username] = "Description";
        }

        $this->response->body(json_encode($output));
    }

    public function action_uploadlogs()
    {
        if ( ! ($json = $this->do_login())) return;

        $owner = Auth::instance()->get_user();

        foreach($json["log_data"] as $username => $logs)
        {
            $user = $owner->participants->where('username', '=', $username)->find();
            if (!$user->loaded())
            {
                $user->username = $username;
                $user->user = $owner;
                $user->save();
            }

            foreach($logs as $log_timestamp => $log_content)
            {
                $existing_log = $user->logs->where('log_timestamp', '=', $log_timestamp)->find();
                if ($existing_log->loaded()) continue;

                $log = new Model_Log();
                $log->participant = $user;
                $log->log_timestamp = $log_timestamp;
                $log->upload_timestamp = time();
                $log->data = $log_content;
                $log->save();
            }
        }

        $this->response->body('Logs saved');
    }

    public function action_load_user()
    {
        if (!$this->do_login()) return;

        if ($username = $this->request->param('username'))
        {
            $participant = ORM::factory('Participant')
                ->where('username', '=', $username)
                ->find();

            if ($username == 'default') $participant = Auth::instance()->get_user()->default_participant;

            if ( ! $participant->loaded())
            {
                $this->response->body('User not found');
                return;
            }

            $this->response->headers('Content-Type', 'application/json');

            $configurations = array();

            foreach ($participant->configurations->order_by('position', 'ASC')->find_all() as $configuration)
            {
                $configurations[] = $configuration->serialize_configuration();
            }

            $this->response->body(json_encode($configurations));
        }
        else
        {
            $this->response->body('No user selected');
            return;
        }
    }

    public function action_sync()
    {
        if (!$this->do_login()) return;

        $owner = Auth::instance()->get_user();
        $participants = $owner->participants->find_all();

        $output = '{';

        foreach($participants as $participant)
        {
            if ($participant->configuration)
                $output .= '"'.$participant->username.'": '.$participant->configuration.',';
        }

        $output .= '}';

        $this->response->headers('Content-Type', 'application/json');
        $this->response->body($output);
    }

    public function action_imageset()
    {
        $imageset_id = (int)$this->request->param('id');
        $imageset = ORM::factory('ImageSet')->where('id', '=', $imageset_id)->find();
        if ($imageset->loaded())
        {
            $this->response->headers('Content-Type', 'application/zip');
            $this->response->headers('Content-Length', @filesize($imageset->path."combined"));
            $this->response->body(file_get_contents($imageset->path."combined"));
        }
        else
        {
            $this->response->body('Image set not found');
            return;
        }
    }
}